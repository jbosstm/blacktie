<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../project_documentation.ent">
%BOOK_ENTITIES;
]>
<section id="chap-administration">
	<title>BlackTie Administration</title>
	<para>
		The
		<xref linkend="sec-administration-operations"></xref>
		are exposed through a both a JMX
		MBean and a Java XATMI service
		deployed into WildFly, configured the
		same btconfig.xml of the domain
		it is administering
	</para>
	<itemizedlist>
		<listitem>
			<para>
				<xref linkend="sec-blacktieadminservice-xatmi-service" />
			</para>
		</listitem>
		<listitem>
			<para>
				<xref linkend="sec-blacktieadminservice-jmx-bean" />
			</para>
		</listitem>
	</itemizedlist>
	<para>Each BlackTie server exposes the same administration service,
		registered
		during AtmiBrokerServer startup</para>
	<orderedlist>
		<listitem>
			<para>
				<xref linkend="sec-atmibrokeradmin-xatmi-service" />
			</para>
		</listitem>
	</orderedlist>

	<para>Queue administration for the AtmiBrokerAdmin service is performed
		through a separate Java XATMI service</para>
	<orderedlist>
		<listitem>
			<para>stompconnectservice: BlacktieStompAdministrationService</para>
		</listitem>
	</orderedlist>

	<para>Administration is facilitated graphically from a JBoss AS RHQ
		administration console plugin</para>
	<orderedlist>
		<listitem>
			<para>
				<xref linkend="sec-blacktie-rhq-plugin"></xref>
			</para>
		</listitem>
	</orderedlist>


	<figure id="fig-administration">
		<title>Administration</title>
		<mediaobject>
			<imageobject>
				<imagedata fileref="images/blacktie-administration.png" format="PNG" />
			</imageobject>
		</mediaobject>
	</figure>

	<section id="sec-administration-operations">
		<title>BlackTie Administration Functions</title>
		<section>
			<title>The following operations all perform functionality at the
				domain level</title>
			<itemizedlist>
				<listitem>
					<para>getSoftwareVersion: </para>
					<para>Retrieve the software version of the domain</para>
				</listitem>
				<listitem>
					<para>getServerList: </para>
					<para>Retrieve the full list of servers</para>
				</listitem>
				<listitem>
					<para>listRunningServers: </para>
					<para>Discover running servers</para>
					<para>To achieve this, the administration routings lists all the
						queues locally for the appearance of the string ADMIN</para>
					<para>Note servers connected to other WildFly instances will not
						be discoverable</para>
				</listitem>
				<listitem>
					<para>reloadDomain: </para>
					<para>Halt servers, update configuration, restart</para>
					<para>This causes reloadServer to be called on all running
						instances</para>
				</listitem>
				<listitem>
					<para>pauseDomain: </para>
					<para>This calls pauseServer for each server</para>
					<para>servers which connect to the domain which it is paused are
						paused automatically</para>
				</listitem>
				<listitem>
					<para>resumeDomain: </para>
					<para>This calls resumeDomain for each server</para>
					<para>Paused servers which reconnect after the domain is resumed
						will resume automatically</para>
				</listitem>
				<listitem>
					<para>getServersStatus: </para>
					<para>This method looks in the btconfig.xml for the list of servers
						and returns an HTML structure to describe the status of the
						servers in the domain, if there are no servers running, than
						instances would not be returned</para>
					<para>
						<programlisting language="XML" role="XML"><xi:include
							href="extras/btconfig-servers.xml" xmlns:xi="http://www.w3.org/2001/XInclude"
							parse="text" /></programlisting>
					</para>
				</listitem>
				<listitem>
					<para>[SERVER_NAME] is a arbitrary length character string</para>
				</listitem>
				<listitem>
					<para>[ID] is a server id</para>
				</listitem>
				<listitem>
					<para>[STATUS] is equal to 0 (Idle) or 1 (Running)</para>
				</listitem>
			</itemizedlist>
		</section>

		<section>
			<title>The following operations perform functionality at the server
				level</title>
			<itemizedlist>
				<listitem>
					<para>getServiceCounter (service name):</para>
					<para>Retrieves the counter for a service from all servers</para>
				</listitem>
				<listitem>
					<para>listRunningInstanceIds (server name):</para>
					<para>Get the list of ids of currently running servers</para>
				</listitem>
				<listitem>
					<para>serverdone:</para>
					<para>Calls server_sigint_handler_callback</para>
					<para>Returns 1</para>
				</listitem>
				<listitem>
					<para>reloadServer:</para>
					<para>requires an external shell script to repeatedly start server
						processes dependent upon exit status of server</para>
					<para>If the server exits with the reloadServer code, then an svn
						update on the configuration is issued and the server restarts
					</para>
				</listitem>
				<listitem>
					<para>advertise (service name):</para>
					<para>Does not allow advertise of &lt;SERVER&gt;_ADMIN_&lt;ID&gt;
					</para>
					<para>Calls advertiseByAdmin (don't need the function pointer)
					</para>
					<para>Returns 1</para>
				</listitem>
				<listitem>
					<para>unadvertise (service name):</para>
					<para>Suppresses unadvertise of &lt;SERVER&gt;_ADMIN_&lt;ID&gt;
					</para>
					<para>Calls tpunadvertise</para>
					<para>Returns 1</para>
				</listitem>
				<listitem>
					<para>pauseServer:</para>
					<para>Stop all currently running services</para>
					<para>Record which services were paused</para>
					<para>A call to tpadvertise will now place a service in the paused
						status</para>
					<para>A call to tpunadvertise will allow unadvertisement of the
						service</para>
				</listitem>
				<listitem>
					<para>resumeServer:</para>
					<para>Start the list of paused services</para>
				</listitem>
				<listitem>
					<para>counter (serviceName):</para>
					<para>Calls getServiceMessageCounter</para>
					<para>Returns a 16 length buffer</para>
					<para>First byte is the number 1</para>
					<para>Remaining 15 bytes contains a long</para>
				</listitem>
				<listitem>
					<para>status [optional service name]:</para>
					<para>Calls getServiceStatus</para>
					<para>Returns an HTML structure ServiceStatus</para>
					<para>First byte of the response is the number 1</para>
					<para>Remaining bytes contains the ServiceStatus</para>
					<para>
						<programlisting language="XML" role="XML"><xi:include
							href="extras/service-status.xml" xmlns:xi="http://www.w3.org/2001/XInclude"
							parse="text" /></programlisting>
					</para>
				</listitem>
				<listitem>
					<para>[SERVICE_NAME] is a 15 character length name</para>
				</listitem>
				<listitem>
					<para>[STATUS] is equal to 0 (unadvertised) or 1 (advertised)
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<section>
			<title>Viewing Transaction Statistics</title>

			<para>In a typical BlackTie installation the transaction service will
				be running in the WildFly Application server where you installed the
				stomp connect service. In such a setup basic transaction management
				information is exposed by the native transaction service running in
				the AS. For example to enable statistics open the JBossTS property
				file located at:</para>


			<itemizedlist>
				<listitem>
					<para>
						$JBOSS_HOME/standalone/configuration/standalone.xml
					</para>
				</listitem>
			</itemizedlist>

			<para>and set the enableStatistics property to YES:</para>

			<para>
				<programlisting language="XML" role="XML">&lt;property name="com.arjuna.ats.arjuna.coordinator.enableStatistics" value="YES"/&gt;</programlisting>
			</para>

			<para>The statistics are then available via any standard JMX browser
				or programatically via JMX. The object name of the MBean that
				maintains the stats is:</para>

			<para>
				<programlisting language="XML" role="XML">jboss.management.local:J2EEServer=Local,j2eeType=JTAResource,name=TransactionManager</programlisting>
			</para>

			<para>If you are using the web based WildFly jmx console then look
				for the name</para>

			<para>
				<programlisting language="XML" role="XML">J2EEServer=Local,j2eeType=JTAResource,name=TransactionManager</programlisting>
			</para>



			<para>in the section called jboss.management.local</para>



			<para>In the jmx console some extra transaction information is also
				exposed as a service with the following name:</para>



			<para>
				<programlisting language="XML" role="XML">service=TransactionManager</programlisting>
			</para>



			<para>The statistics are global to the application server. We would
				like to provide similar information on a per BlackTie domain and per
				BlackTie server basis in a future release.</para>
		</section>
	</section>

	<section id="sec-blacktieadminservice-xatmi-service">
		<title>BlackTieAdminService XATMI Service</title>
		<para>Defined in stompconnectservice:BlacktieAdminServiceXATMI</para>
		<para>Contains the same functionality as the JMX bean</para>
		<para>The XATMI service is accessed by:</para>
		<itemizedlist>
			<listitem>
				<para>User defined XATMI administration clients</para>
			</listitem>
		</itemizedlist>
	</section>
	<section id="sec-blacktieadminservice-jmx-bean">
		<title>BlacktieAdminService JMX Bean</title>
		<para>Defined in the module:
			stompconnectservice:BlacktieAdminServiceMBean</para>
		<para>The JMX bean is accessed by either:</para>
		<itemizedlist>
			<listitem>
				<para>blacktie-rhq-plugin</para>
			</listitem>
			<listitem>
				<para>Custom JMX administration programs</para>
			</listitem>
		</itemizedlist>
	</section>
	<section id="sec-atmibrokeradmin-xatmi-service">
		<title>AtmiBrokerAdmin XATMI Service</title>
		<para>The BlackTie administration services marshal calls to this raw
			administration service deployed in each server</para>

		<para>The service is bound with a well known name:</para>

		<itemizedlist>
			<listitem>
				<para>&lt;SERVER_NAME&gt;_ADMIN_&gt;SERVER_ID&gt;</para>
			</listitem>
		</itemizedlist>

		<para>Each server exposes the administration service for the duration
			of its lifespan</para>
		<para>Clients (typically the BlackTie administration services) are
			able to invoke a standard XATMI service with a structured command
		</para>

		<para>Command structure is (note the trailing comma's):</para>

		<para>
			<programlisting>&lt;command&gt;,[&lt;arg1&gt;,&lt;arg2&gt;,....]</programlisting>
		</para>
	</section>
	<section id="sec-blacktie-rhq-plugin">
		<title>Monitoring and management of blacktie servers by
			blacktie-rhq-plugin
	</title>

		<section>
			<title>Install blacktie-rhq-plugin</title>

			<orderedlist>
				<listitem>
					<para>copy
						&lt;BLACKTIE_BIN_DIR&gt;/blacktie-admin-services/blacktie-rhq-plugin-&lt;VERSION&gt;.jar
						to
						&lt;JBOSS_HOME&gt;/server/all/deploy/admin-console.war/plugins
					</para>
				</listitem>

				<listitem>
					<para>restart jboss as</para>
				</listitem>

				<listitem>
					<para>open http://localhost:8080/admin-console, now you can find
						'Blacktie Domains'</para>
				</listitem>
			</orderedlist>

		</section>
		<section>
			<title>
				How to manage a blacktie server</title>
			<orderedlist>
				<listitem>
					<para>start a server in
						&lt;BLACKTIE_BIN_DIR&gt;/quickstart/xatmi/foo
						following with README
				</para>
				</listitem>

				<listitem>
					<para>navigate to "Blacktie Domains" -> "fooapp" ->
						"Servers" ->
						"default", you can click "Control"
				</para>
				</listitem>

				<listitem>
					<para>there is a operation
						named 'shutdown', and you can click the
						button.
						You should type in
						server id which used to start quickstart
						server, e.g
						if you start quickstart
						server with command 'server -c
						linux
						-i 1' , and
						you should type in '1'
				</para>
				</listitem>

				<listitem>
					<para>other operations such like 'listServiceStatus',
						'getServiceCounter',
						'advertise' and 'unadvertise'. you could type
						in a
						SERVICE NAME, e.g
						if you want to unadvertise service BAR in
						server 1,
						you should click
						operation 'unadvertise' and type '1' in
						id
						also type
						'BAR' in
						service.</para>
				</listitem>
			</orderedlist>
		</section>
		<section>
			<title>How to monitor a blacktie server</title>

			<orderedlist>
				<listitem>
					<para>If there is no
						server instance
						running, a red cross will be in
						front
						of the server
						name</para>
				</listitem>

				<listitem>
					<para>navigate to
						'Metric' tab, you should see the number of running
						instances of server</para>
				</listitem>
			</orderedlist>
		</section>
	</section>
	<section>
		<title>BlackTie Command Line Administration</title>
		<section>
			<title>Introduction</title>
			<para>The following commands are supported by BlackTie:</para>
			<table id="commands-overview">
				<title>Commands</title>
				<tgroup cols="2">
					<thead>
						<row>
							<entry>
								<para>Command</para>
							</entry>
							<entry>
								<para>Description</para>
							</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>
								<xref linkend="btadmin-command" />
							</entry>
							<entry>
								<para>The btadmin command is used to administer the BlackTie
									serve process from the command line</para>
							</entry>
						</row>
						<row>
							<entry>
								<xref linkend="generate_server-command" />
							</entry>
							<entry>
								<para>The generate_server command is used to build a BlackTie
									server</para>
							</entry>
						</row>
						<row>
							<entry>
								<xref linkend="generate_client-command" />
							</entry>
							<entry>
								<para>The generate_client command is used to build a client
									application linked against the BlackTie libraries</para>
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</section>
		<section id="btadmin-command">
			<title>btadmin</title>
			<section>
				<title>Overview</title>
				<para>The btadmin command is used to perform command line
					administration of the BlackTie server processes. In a well
					configured environment, the btadmin tool can be launched in either
					interactive mode (by ommitting a command) or in non-interactive
					mode
					by issues a command, for example: "btadmin startup". For the
					list of
					commands type: "help"
			</para>
			</section>
			<section>
				<title>Expected Environment</title>
				<para>
					You must have called
					<programlisting>&lt;BLACKTIE_HOME&gt;/setenv.[sh|bat]</programlisting>
				</para>
				<para>
					You must, either set
					<literal>BLACKTIE_CONFIGURATION_DIR</literal>
					to
					the directory containing a btconfig.xml for the domain that you
					wish to
					administer or ensure a valid btconfig.xml is in the working
					directory
				</para>
			</section>
			<section>
				<title>Usage</title>
				<para>
					<programlisting>btadmin [&lt;command&gt;]</programlisting>
				</para>
			</section>
			<section>
				<title>Commands</title>
				<table id="btadmin-commands-overview">
					<title>btadmin commands</title>
					<tgroup cols="2">
						<thead>
							<row>
								<entry>
									<para>Command</para>
								</entry>
								<entry>
									<para>Description</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>version</para>
								</entry>
								<entry>
									<para>Print out the version of BlackTie that is linked against
									</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>startup [&lt;serverName&gt;]</para>
								</entry>
								<entry>
									<para>Start the server, optionally constrained by the
										serverName
								</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>pauseDomain</para>
								</entry>
								<entry>
									<para>Pause the domain
								</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>advertise &lt;serverName&gt; &lt;serviceName&gt;</para>
								</entry>
								<entry>
									<para>Advertise the service indicated by the name at the server
									</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>help [command]</para>
								</entry>
								<entry>
									<para>Get help on a command
								</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>getServersStatus</para>
								</entry>
								<entry>
									<para>The status of the running servers
								</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>unadvertise &lt;serverName&gt; &lt;serviceName&gt;</para>
								</entry>
								<entry>
									<para>Unadvertise the service at the specified server
								</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>resumeDomain</para>
								</entry>
								<entry>
									<para>Resume the domain
								</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>listRunningServers</para>
								</entry>
								<entry>
									<para>List all running servers in the domain
								</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>quit</para>
								</entry>
								<entry>
									<para>Shutdown the btadmin tool, a no-op for a non-interactive
										btadmin shell
								</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>listRunningInstanceIds &lt;serverName&gt;</para>
								</entry>
								<entry>
									<para>List the running instance ids of a specific server
								</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>listServiceStatus &lt;serverName&gt; &lt;serviceName&gt;
									</para>
								</entry>
								<entry>
									<para>List the status of the service running on a particular
										server group
								</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>shutdown [&lt;serverName&gt; [&lt;serverId&gt;]]</para>
								</entry>
								<entry>
									<para>Shutdown items in the domain, optionally constrained by a
										server name and (again, optionally) a serverId
								</para>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</section>
			<section>
				<title>Credentials</title>
				<para>The administration connection is assumed to be made within a
					secure network</para>
			</section>
		</section>
		<section id="generate_server-command">
			<title>generate_server</title>
			<section>
				<title>Overview</title>

				<para>The generate_server command is used to create a standalone
					BlackTie server application linking the user code against the
					BlackTie runtime libraries.</para>
			</section>
			<section>
				<title>Expected Environment</title>

				<para>&lt;BLACKTIE_HOME&gt;/setenv.[sh|bat] must be executed prior
					to
					execution</para>
			</section>
			<section>
				<title>Usage</title>
				<para>
					<programlisting>generate_server &lt;-Dservice.names=service[,service2,...]&gt; &lt;-Dserver.includes="source1[ source2 ..."]&gt; &lt;-Dx.inc.dir="directory"&gt; &lt;-Dx.inc.dir2="directory2"&gt;   &lt;-Dx.lib.dir="directory" -Dx.libs="library[ library2]"&gt; &lt;-Dx.lib.dir2="directory2"&gt; &lt;-Dx.libs2="library[ library2]"&gt; &lt;-Dx.define="symbol1[,symbol2]"&gt;</programlisting>
				</para>
			</section>
			<section>
				<title>
					Parameters</title>

				<table id="generate_server-parameters">
					<title>generate_server parameter</title>
					<tgroup cols="2">
						<thead>
							<row>
								<entry>
									<para>Parameter</para>
								</entry>
								<entry>
									<para>Description</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>-Dservice.names=service[,service2,...]</para>
								</entry>
								<entry>
									<para>This is the comma seperated list of services that should
										be advertised at boottime that were not coded in a DLL export
										compatible manner and as such cannot be registered for
										advertised in the btconfig.xml
								</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>-Dserver.includes="source1[ source2 ..."]</para>
								</entry>
								<entry>
									<para>The list of files that should be compiled into this
										server
								</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>-Dx.inc.dir="directory"</para>
								</entry>
								<entry>
									<para>A single additional directory for including
								</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>-Dx.lib.dir="directory"</para>
								</entry>
								<entry>
									<para>A single additional directory for linking against
								</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>-Dx.libs="library[ library2]"</para>
								</entry>
								<entry>
									<para>A space seperated list of libraries to link against in
										the
										lib dir
								</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>-Dx.inc.dir2="directory"</para>
								</entry>
								<entry>
									<para>A second additional directory to include headers from
									</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>-Dx.lib.dir2="directory"</para>
								</entry>
								<entry>
									<para>A second additional directory to include libraries from
									</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>-Dx.libs2="library[ library2]"</para>
								</entry>
								<entry>
									<para>The list of libraries to include from the second library
										directory
								</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>-Dx.define="symbol1[,symbol2]"</para>
								</entry>
								<entry>
									<para>The comma-seperated list of addtional pre-processor
										symbols to define
								</para>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</section>
			<section>
				<title>Example</title>
				<para>To link against the Oracle database</para>
				<para>On Linux:</para>
				<para>
					<programlisting>generate_server -Dservice.names=BAR -Dserver.includes="request.c ora.c DbService.c"
			-Dx.inc.dir="$ORACLE_HOME/rdbms/public"
			-Dx.lib.dir="$ORACLE_HOME/lib" -Dx.libs="occi clntsh"
			-Dx.define="ORACLE"</programlisting>
				</para>
				<para>On Windows:</para>
				<para>
					<programlisting>generate_server -Dservice.names=BAR -Dserver.includes="request.c ora.c DbService.c"
			-Dx.inc.dir="%ORACLE_HOME%\OCI\include"
			-Dx.lib.dir="%ORACLE_HOME%\OCI\lib\MSVC" -Dx.libs="oci"
			-Dx.define="ORACLE"</programlisting>
				</para>
			</section>
		</section>
		<section id="generate_client-command">
			<title>generate_client</title>
			<section>
				<title>Overview</title>
				<para>The generate_client command is used to create a standalone
					client application linking the user code against the BlackTie
					runtime libraries.</para>
			</section>
			<section>
				<title>Expected Environment</title>
				<para>&lt;BLACKTIE_HOME&gt;/setenv.[sh|bat] must be executed prior
					to
					execution</para>
			</section>
			<section>
				<title>Usage</title>
				<para>
					<programlisting>generate_client &lt;-Dclient.includes="source1[ source2 ..."]&gt; &lt;-Dx.inc.dir="directory" &gt; &lt;-Dx.inc.dir2="directory2"&gt;   &lt;-Dx.lib.dir="directory" -Dx.libs="library[ library2]"&gt; &lt;-Dx.lib.dir2="directory2"&gt; &lt;-Dx.libs2="library[ library2]"&gt; &lt;-Dx.define="symbol1[,symbol2]"&gt;</programlisting>
				</para>
			</section>
			<section>
				<title>Parameters</title>
				<table id="generate_client-parameters">
					<title>generate_client parameter</title>
					<tgroup cols="2">
						<thead>
							<row>
								<entry>
									<para>Parameter</para>
								</entry>
								<entry>
									<para>Description</para>
								</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<para>-Dclient.includes="source1[ source2 ..."]</para>
								</entry>
								<entry>
									<para>The list of files that should be compiled into this
										client
								</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>-Dx.inc.dir="directory"</para>
								</entry>
								<entry>
									<para>A single additional directory for including
								</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>-Dx.lib.dir="directory"</para>
								</entry>
								<entry>
									<para>A single additional directory for linking against
								</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>-Dx.libs="library[ library2]"</para>
								</entry>
								<entry>
									<para>A space seperated list of libraries to link against in
										the
										lib dir
								</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>-Dx.inc.dir2="directory"</para>
								</entry>
								<entry>
									<para>A second additional directory to include headers from
									</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>-Dx.lib.dir2="directory"</para>
								</entry>
								<entry>
									<para>A second additional directory to include libraries from
									</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>-Dx.libs2="library[ library2]"</para>
								</entry>
								<entry>
									<para>The list of libraries to include from the second library
										directory
								</para>
								</entry>
							</row>
							<row>
								<entry>
									<para>-Dx.define="symbol1[,symbol2]"</para>
								</entry>
								<entry>
									<para>The comma-seperated list of addtional pre-processor
										symbols to define
								</para>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</section>

			<section>
				<title>Example</title>

				<para>To create a client which links against the Oracle database.
				</para>

				<para>On Linux:</para>

				<para>
					<programlisting>generate_client -Dclient.includes="client.c request.c ora.c cutil.c"
		-Dx.inc.dir="$ORACLE_HOME/rdbms/public"
		-Dx.lib.dir="$ORACLE_HOME/lib" -Dx.libs="occi clntsh"
		-Dx.define="ORACLE"</programlisting>
				</para>
				<para>On Windows:</para>
				<para>
					<programlisting>generate_client -Dclient.includes="client.c request.c ora.c cutil.c"
		-Dx.inc.dir="%ORACLE_HOME%\OCI\include"
		-Dx.lib.dir="%ORACLE_HOME%\OCI\lib\MSVC" -Dx.libs="oci"
		-Dx.define="ORACLE"</programlisting>
				</para>
			</section>
		</section>
	</section>
</section>
