<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../project_documentation.ent">
%BOOK_ENTITIES;
]>
<section id="chap-services">
    <title>Services</title>

    <section>
        <title>Building XATMI services and clients</title>
        <para>This article should explain how to work with the Blacktie
            framework in order to develop your own XATMI services and clients. We
            will discuss how to run the code generation tool along with how to
            provide the configuration files that are required on the client and
            server side.
        </para>

        <section>
            <title>Pre-requisites</title>

            <para>The provided
                &lt;BLACKTIE_BIN_DIR&gt;/setenv.[sh|bat] should be
                executed to put the build
                tools in the environment.
            </para>

            <section>
                <title>WINDOWS ONLY</title>

                <para>Install Visual V++ 2008 Express Edition (only used to provide
                    the
                    compiler
                    and linker on Windows)
                </para>

                <para>The PATH environment variable will need the runtime DLLs in it
                </para>

                <para>
                    <literal>C:\Program Files\Microsoft Visual Studio
                        9.0\VC\redist\Debug_NonRedist\x86\Microsoft.VC90.DebugCRT
                    </literal>
                </para>

                <para>The PATH environment variable will also need the VC++ tools in
                    it
                </para>
                <para>
                    <literal>C:\Program Files\Microsoft Visual Studio
                        9.0\VC\vcvarsall.bat
                    </literal>
                </para>
            </section>
        </section>

        <section>
            <title>Configuring the server, services and clients</title>

            <para>Each of the following configuration files must be present at
                runtime
                inorder for Blacktie servers or clients to operate correctly
            </para>

            <itemizedlist>
                <listitem>
                    <para>btconfig.xml (this file although of the same structure, the
                        content
                        will be different for windows and for linux)
                    </para>
                </listitem>
            </itemizedlist>

            <para>The schemas that these files must validate against
                are in
                &lt;BLACKTIE_BIN_DIR&gt;/schemas/xsd, you can read more about
                providing
                configuration here.
            </para>
        </section>


        <section>
            <title>Running the code generation tool</title>
            <para>When building clients or servers using the provided ANT script
                you
                will need to make sure you have set the environment in the manner
                indicated in
                &lt;BLACKTIE_BIN_DIR&gt;/setenv.[sh|bat]</para>

            <para>An example run
                configuration for the code generation tool would
                then
                look like:
            </para>
            <para>
                <programlisting>&lt;BLACKTIE_BIN_DIR&gt;/bin/generate_server.&lt;sh|bat&gt;
			-Dserver.includes=BarService.c -Dservice.names=BAR</programlisting>
            </para>

            <para>
                <programlisting>&lt;BLACKTIE_BIN_DIR&gt;/bin/generate_client.&lt;sh|bat&gt;
			-Dclient.includes=client.c</programlisting>
            </para>
        </section>


        <section>
            <title>Running a generated server and client</title>

            <para>The following are the requirements to run the generated server
                and
                client:
            </para>
            <para>The LD_LIBRARY_PATH or PATH must be set to include the
                &lt;BLACKTIE_BIN_DIR&gt;/lib
                folder (done
                by setenv.[sh|bat]
            </para>
            <para>The commands must be executed from the
                directory relative to
                where the
                configuration files exist
            </para>

            <para>Assuming the
                pre-requisites are adhered to all that must be done
                is to
                execute
            </para>
            <para>
                <literal>server[.exe] -c [configuration_dir] -i [unique_id]
                </literal>
                and then
            </para>
            <para>
                <literal>client[.exe]</literal>
                (if the client is not in the location of the
                configuration files you
                need to set the environment variable
                <literal>BLACKTIE_CONFIGURATION_DIR</literal>
                .
            </para>
        </section>
    </section>

    <section>
        <title>XATMI Services and BlackTie</title>

        <para>Here a service is defined as a unit of business logic that
            implements
            the tpservice(SVCINFO) method as defined in the XATMI
            specification
            section 3.3.
        </para>



        <para>In BlackTie services are broadly categorised as either:</para>
        <itemizedlist>
            <listitem>
                <para>Administrative</para>
            </listitem>
            <listitem>
                <para>User defined</para>
            </listitem>
        </itemizedlist>

        <section>
            <title>Administrative Services</title>
            <para>Each server exposes a single XATMI service that is built into
                the server
                executable and is exposed for the lifespan of the server.
                It is not
                intended to be accessed directly by the programmer although
                this is
                possible, instead however the results of the service are
                typically
                aggregated by a central Java domain-level XATMI
                administrative
                service.
            </para>
        </section>
        <section>
            <title>C XATMI Per Server Service</title>

            <para>The name of the service is not user defined although can be
                predicted:
            </para>
            <para>
                <literal>&lt;SERVER_NAME&gt;_ADMIN_&lt;SERVER_ID&gt;</literal>
            </para>

            <note>
                <para>User defined services are not allowed to be configured with a
                    name with _ADMIN in them
                </para>
            </note>
        </section>

        <section>
            <title>Java XATMI Domain-wide Service</title>

            <para>The name of the service again is not
                user defined although can
                be
                predicted from the domain name:
            </para>

            <para>
                <literal>&lt;DOMAIN_NAME&gt;_ADMIN</literal>
            </para>
        </section>

        <section>
            <title>User Defined Services</title>
            <para>All user defined service names must be
                declared
                within the
                constraints
                defined in the XATMI specification
                plus several
                constraints imposed
                by BlackTie:
            </para>

            <itemizedlist>
                <listitem>
                    <para>Service names must be 128
                        characters or
                        less
                    </para>
                </listitem>
                <listitem>
                    <para>Servers may not contain overlapping service names,
                        e.g. server
                        1
                        and
                        server 2 cannot define service A
                    </para>
                </listitem>
                <listitem>
                    <para>Service names may
                        not use the
                        reserved keyword _ADMIN_ in their
                        name
                    </para>
                </listitem>
                <listitem>
                    <para>The service must be
                        defined in
                        the btconfig.xml
                    </para>
                </listitem>
                <listitem>
                    <para>The service may optionally be customized
                        in the btconfig.xml
                    </para>
                </listitem>
                <listitem>
                    <para>The same function for the same service is expected at each
                        server
                    </para>
                </listitem>
                <listitem>
                    <para>tpadvertise and tpunadvertise operate on the local service
                        state,
                        they
                        are not used to (un)advertise the service at a domain
                        wide
                        level
                    </para>
                </listitem>
                <listitem>
                    <para>If a
                        service is not thread safe, it is important to set the
                        SIZE for the SERVICE in
                        the
                        btconfig.xml file to 1
                    </para>
                </listitem>
            </itemizedlist>
        </section>
    </section>

    <section>
        <title>Decoupling XATMI services and clients using a queuing pattern
        </title>
        <section>
            <title>Introduction</title>
            <para>Starting from release blacktie-3_0_0 we have added two methods
                called
                btenqueue and btdequeue to simplify sending and receiving
                message. The
                M1 release supports transactional sends and the M2
                release will
                support ﻿transactional receives.
            </para>

            <para>This page will be updated soon to reflect the change.</para>



            <para>XATMI (http://www.opengroup.org/pubs/catalog/c506.htm) is a
                standard which
                specifies how to connect clients to services. A client
                is a program
                that requests services to be performed. A service is a
                program that
                performs a specific application function on behalf of
                clients. In
                XATMI there are two types of service:
            </para>
            <orderedlist>
                <listitem>
                    <para>Request/response services receive a single request and
                        produce
                        at most a single
                        response to the request. The request is the
                        application data sent from
                        the client to the service. The service
                        processes the request and
                        returns application data to the client by
                        means of at most one
                        response;
                    </para>
                </listitem>
                <listitem>
                    <para>Conversational services are invoked by means of a connection
                        request from the
                        client. Once the connection is established and the
                        service invoked,
                        the client and the service can exchange data in an
                        application-specific manner until the service returns, whereupon
                        the
                        connection is logically terminated.
                    </para>
                </listitem>
            </orderedlist>


            <para>However this model breaks down if there is no service currently
                running that
                can handle the client request. The latest release of
                BlackTie includes
                an enhancement (to XATMI) that facilitates the
                queuing of client
                requests such that the request can be processed at
                a
                later time when
                an appropriate service becomes available.
            </para>



            <para>In XATMI message payloads are obtained using the following
                call:
            </para>



            <para>
                <programlisting language="C++" role="C++">char * tpalloc(char *type, char *subtype, long size)</programlisting>
            </para>



            <para>To take advantage of the new BlackTie feature you will need to
                pass an
                extra parameter to the XATMI buffer allocation routine:
            </para>



            <para>
                <programlisting language="C++" role="C++">char* btalloc(msg_opts_t* ctrl, char* type, char* subtype, long size);</programlisting>
            </para>



            <para>The resulting buffer can be used to make service requests with
                the following restrictions:
            </para>

            <orderedlist>
                <listitem>
                    <para>the client must use the asynchronous request/response model,
                        i.e. it must use tpacall.
                    </para>
                </listitem>
                <listitem>
                    <para>the client must not expect a response, i.e. it must set the
                        TPNOREPLY flag.
                    </para>
                </listitem>
                <listitem>
                    <para>it must not have any outstanding transaction.</para>
                </listitem>
            </orderedlist>


            <para>[Currently we are using the extra parameter to control the
                priority of message delivery though we could, in the future, add
                other features to give the client more control over the mechanism].
            </para>



            <para>And that's it, now when the requested service is brought
                on-line
                the queued requests will be made available to its' service
                routine.
                The latest BlackTie release
                (http://www.jboss.org/blacktie/downloads.html) includes an quickstart
                showing this feature in action. Unpack the release and look at the
                REAME in the quickstarts/xatmi/queues directory.
            </para>


            <para>There are two BlackTie specific config requirements to ensure
                that requests are queued even when the target server is unavailable;
            </para>
            <itemizedlist>
                <listitem>
                    <para>the SERVICE definition in btconfig.xml must set the
                        "externally-managed-destination" attribute to true;
                    </para>
                </listitem>
                <listitem>
                    <para>you must deploy a JMS queue named BTR_[service name] to the
                        application server (the XML file containing this queue definition
                        must end with the suffix -service.xml)
                    </para>
                </listitem>
            </itemizedlist>


            <para>Internally BlackTie uses JMS queues to connect services with
                clients. Normally when a server calls tpadvertise a queue is created
                and clients may then connect with the server via that queue.
                However,
                no such server is running in the scenario we are discussing
                and this
                is the reason the queue needs to be deployed before running
                the
                client.
            </para>



            <para>So, for example, if the service name is TestOne then deploy a
                queue called BTR_TestOne to the JBoss deploy directory using an XML
                file containing the following:
            </para>



            <para>
                <programlisting language="XML" role="XML"><xi:include href="extras/registering_a_queue.xml"
                    xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" /></programlisting>
            </para>
        </section>
    </section>

    <section>
        <title>How to use topics
        </title>
        <para>Basically, topics are used to burst out messages to multiple XATMI services
            that do not necessarily expect a reponse.
        </para>

        <para>If it helps, you might consider using topics for things like stock ticker
            updates where the receiver is not required to notify the sender that they have
            received the ticker.
        </para>


        <para>
            To config a SERVIECE use topics, you could set type to 'topic', for example:
        </para>

        <para>
            <programlisting language="XML" role="XML"><xi:include href="extras/use_topic.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" /></programlisting>
        </para>

        <note>
            <para>clients do not need to configure the list of services in their btconfig.xml,
                they will need to try to connect to the queue first, then, the topic (unless
                they have the destination is configured in their btconfig.xml).
            </para>
        </note>

        <note>
            <para>tpacalls to topics MUST have TPNOREPLY set. If the client tpacalls a topic
                without TPNOREPLY we should fail the call. It also means tpcalls should fail too.
            </para>

            <para>
                And there is a intention that externally-managed-destination is set to true as
                there are multiple receivers.
            </para>
        </note>

        <para>You can get more information about these in quickstarts/xatmi/topics.
        </para>
    </section>
</section>